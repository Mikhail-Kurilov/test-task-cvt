{"ast":null,"code":"class GameDrPill {\n  constructor({\n    id,\n    callbacks\n  }) {\n    this.canvas = document.getElementById(id);\n    this.context = this.canvas.getContext('2d');\n    this.canvas.width = 560;\n    this.canvas.height = 560;\n    this.canvas.addEventListener('mouseup', () => this.mouseUp());\n    this.canvas.addEventListener('mousedown', () => this.mouseDown());\n    this.ADD_PILLS = 10;\n    this.FIELD_SIZE = 8;\n    this.ROUND_TIME = 60; // sec\n\n    this.callbacks = callbacks;\n    this.field = [];\n    this.sec = 0;\n    this.interval = null;\n    this.currentPills = 0;\n    this.requirePills = 20;\n    this.vaccineScore = 0;\n    this.firstStep = true;\n  }\n\n  start() {\n    this.field = [];\n    this.sec = 0;\n    this.firstStep = true;\n    const pills = [1, 2, 3, 4, 5];\n\n    for (let i = 0; i < this.FIELD_SIZE; i++) {\n      this.field.push([]);\n\n      for (let j = 0; j < this.FIELD_SIZE; j++) {\n        this.field[i][j] = Math.floor(Math.random() * pills.length);\n      }\n    }\n  }\n\n  startTimeUpdate() {\n    this.interval = setInterval(() => {\n      this.sec++;\n\n      if (this.sec >= this.ROUND_TIME) {\n        // закончить игру\n        clearInterval(this.interval);\n        this.callbacks.endGame(this.vaccineScore);\n        return;\n      }\n\n      this.callbacks.timeTick(this.ROUND_TIME - this.sec);\n    }, 1000);\n  }\n\n  move(i1, j1, i2, j2) {\n    if (this.field[i1][j1] === 0 || this.field[i2][j2] === 0) {\n      if (i1 === i2 && Math.abs(j1 - j2) === 1 || Math.abs(i1 - i2) === 1 && j1 === j2) {\n        let c = this.field[i1][j1];\n        this.field[i1][j1] = this.field[i2][j2];\n        this.field[i2][j2] = c;\n\n        if (this.firstStep) {\n          // стартовать счетчик времени\n          this.firstStep = false;\n          this.startTimeUpdate();\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getStatus() {}\n\n  isGameOver() {}\n\n  removeLines() {}\n\n  getNewLevel() {\n    /*this.count = 0;\r\n    if (this.pills >= 20) {\r\n       this.count += 1;\r\n    }\r\n    this.pills += 10;*/\n  }\n\n  printCell(i, j, number) {\n    /*if (number) {\r\n        context.fillStyle = 'orange';\r\n        context.fillRect(i * SIZE + 1, j * SIZE + 1, SIZE - 2, SIZE - 2);\r\n    }*/\n  }\n\n  render() {\n    /*clear();\r\n    for (i = 0; i < game.field.length; i++) {\r\n        for (j = 0; j < game.field.length; j++) {\r\n            printCell(j, i, game.field[i][j]);\r\n        }\r\n    }*/\n  }\n\n}\n\nexport default GameDrPill;","map":{"version":3,"sources":["D:/test/vs_studio/dr-pill/src/components/Game/GameDrPill.js"],"names":["GameDrPill","constructor","id","callbacks","canvas","document","getElementById","context","getContext","width","height","addEventListener","mouseUp","mouseDown","ADD_PILLS","FIELD_SIZE","ROUND_TIME","field","sec","interval","currentPills","requirePills","vaccineScore","firstStep","start","pills","i","push","j","Math","floor","random","length","startTimeUpdate","setInterval","clearInterval","endGame","timeTick","move","i1","j1","i2","j2","abs","c","getStatus","isGameOver","removeLines","getNewLevel","printCell","number","render"],"mappings":"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","sourcesContent":["class GameDrPill {\r\n    constructor({ id, callbacks }) {\r\n        this.canvas = document.getElementById(id);\r\n        this.context = this.canvas.getContext('2d');\r\n        this.canvas.width = 560;\r\n        this.canvas.height = 560;\r\n        this.canvas.addEventListener('mouseup', () => this.mouseUp());\r\n        this.canvas.addEventListener('mousedown', () => this.mouseDown());\r\n\r\n        this.ADD_PILLS = 10;\r\n        this.FIELD_SIZE = 8;\r\n        this.ROUND_TIME = 60; // sec\r\n\r\n        this.callbacks = callbacks;\r\n\r\n        this.field = [];\r\n        this.sec = 0;\r\n        this.interval = null;\r\n        this.currentPills = 0;\r\n        this.requirePills = 20;\r\n        this.vaccineScore = 0;\r\n        this.firstStep = true;\r\n    }\r\n\r\n    start() {\r\n        this.field = [];\r\n        this.sec = 0;\r\n        this.firstStep = true;\r\n        \r\n        const pills = [1, 2, 3, 4, 5];\r\n        for (let i = 0; i < this.FIELD_SIZE; i++) {\r\n            this.field.push([]);\r\n            for (let j = 0; j < this.FIELD_SIZE; j++) {\r\n                this.field[i][j] = Math.floor(Math.random() * pills.length);\r\n            }\r\n        }\r\n    }\r\n\r\n    startTimeUpdate() {\r\n        this.interval = setInterval(() => {\r\n            this.sec++;\r\n            if (this.sec >= this.ROUND_TIME) { // закончить игру\r\n                clearInterval(this.interval);\r\n                this.callbacks.endGame(this.vaccineScore);\r\n                return;\r\n            }\r\n            this.callbacks.timeTick(this.ROUND_TIME - this.sec);\r\n        }, 1000);\r\n    }\r\n\r\n    move(i1, j1, i2, j2) {\r\n        if (this.field[i1][j1] === 0 || this.field[i2][j2] === 0) {\r\n            if ((i1 === i2 && Math.abs(j1 - j2) === 1) || \r\n                (Math.abs(i1 - i2) === 1 && j1 === j2)\r\n            ) {\r\n                let c = this.field[i1][j1];\r\n                this.field[i1][j1] = this.field[i2][j2];\r\n                this.field[i2][j2] = c;\r\n                if (this.firstStep) { // стартовать счетчик времени\r\n                    this.firstStep = false;\r\n                    this.startTimeUpdate();\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getStatus() {}\r\n\r\n    isGameOver() {}\r\n\r\n    removeLines() {}\r\n\r\n    getNewLevel() {\r\n        /*this.count = 0;\r\n        if (this.pills >= 20) {\r\n           this.count += 1;\r\n        }\r\n        this.pills += 10;*/\r\n    }\r\n\r\n    printCell(i, j, number) {\r\n        /*if (number) {\r\n            context.fillStyle = 'orange';\r\n            context.fillRect(i * SIZE + 1, j * SIZE + 1, SIZE - 2, SIZE - 2);\r\n        }*/\r\n    }\r\n\r\n    render() {\r\n        /*clear();\r\n        for (i = 0; i < game.field.length; i++) {\r\n            for (j = 0; j < game.field.length; j++) {\r\n                printCell(j, i, game.field[i][j]);\r\n            }\r\n        }*/\r\n    }\r\n}\r\n\r\nexport default GameDrPill;"]},"metadata":{},"sourceType":"module"}